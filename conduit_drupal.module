<?php
/**
 * @file
 * Provides common Conduit Drupal code.
 *
 * @author Jimmy Berry ("boombatower", http://drupal.org/user/214218)
 */

/**
 * Implements hook_block_view_alter().
 */
function conduit_drupal_block_view_alter(&$data, $block) {
  if ($block->module == 'conduit' && $block->delta == 'conduit' && !empty($data['content'])) {
    // If the current job node is a scan job then modify the plumber link to
    // include the scan so it will automatically be added to properties.
    if (($node = menu_get_object()) && $node->type == 'conduit_job_drupal_scan') {
      $data['content']['drupal']['#links']['Tests']['title'] .= ' (from scan)';
      $data['content']['drupal']['#links']['Tests']['query']['scan'] = $node->nid;
    }
  }
}

/**
 * Implements hook_form_alter(): conduit_job_drupal_plumber_node_form.
 */
function conduit_drupal_form_conduit_job_drupal_plumber_node_form_alter(&$form, &$form_state, $form_id) {
  // If scan value exists then place it in properties field.
  if (isset($_GET['scan'])) {
    $form['conduit_properties'][LANGUAGE_NONE][0]['value']['#default_value'] = serial_display(array('scan' => (int) $_GET['scan']), 'edit');
  }
}

/**
 * Implements hook_conduit_validate().
 */
function conduit_drupal_conduit_validate(array $properties) {
  extract($properties);
  if ($version < 6 || $version > 8) {
    conduit_validate_error('version', t('must be 6, 7, or 8'));
  }

  // Properties implemented in child plugins.
  if (isset($database) && !in_array($database, array('mysql'))) {
    conduit_validate_error('database', t('must be mysql'));
  }

  if (isset($variables) && !is_array($variables)) {
    conduit_validate_error('variables', t('must be an array'));
  }
}

/**
 * Implements hook_conduit_default_properties().
 */
function conduit_drupal_conduit_default_properties() {
  return array(
    'mask' => '/\.(php|inc|install|module|test)$/',
    'version' => 7,
  );
}

/**
 * Implements hook_conduit_init().
 */
function conduit_drupal_conduit_init($node, $chunk_count) {
  // Empty result fields containing previous result.
  module_load_install('conduit_drupal');
  $fields = array_keys(conduit_drupal_install_fields());
  foreach ($fields as $field) {
    if (isset($node->$field)) {
      $node->{$field}[LANGUAGE_NONE] = array();
    }
  }
}

/**
 * Implements hook_conduit_result().
 */
function conduit_drupal_conduit_result($node, $delta, $result) {
  $info = conduit_job_info($node->type);
  // @TODO Grab the totals from the previous chunks and add them to the totals
  // for the current chunk. Replace this with view sums once added.
  if (preg_match('/(\d+) \w+, (\d+) \w+, and (\d+) \w+/', $node->conduit_summary[LANGUAGE_NONE][0]['value'], $match)) {
    $result['#total'][0] += $match[1];
    $result['#total'][1] += $match[2];
    $result['#total'][2] += $match[3];
  }
  $node->conduit_summary[LANGUAGE_NONE][0]['value'] = module_invoke($info['module'], 'conduit_drupal_result_message', $result['#total']);
  unset($result['#total']);

  $delta = isset($node->conduit_result_drupal_summary[LANGUAGE_NONE]) ? count($node->conduit_result_drupal_summary[LANGUAGE_NONE]) : 0;
  foreach ($result as $item => $messages) {
    $title = !empty($messages['#title']) ? $messages['#title'] : $item;
    $node->conduit_result_drupal_summary[LANGUAGE_NONE][]['value'] = $title . ': ' . module_invoke($info['module'], 'conduit_drupal_result_message', $messages['#total']);
    $node->conduit_result_drupal_item[LANGUAGE_NONE][]['value'] = $item;
    foreach ($messages['#total'] as $type => $total) {
      $node->{'conduit_result_drupal_type_' . $type}[LANGUAGE_NONE][]['value'] = $messages['#total'][$type];
    }
    unset($messages['#title']);
    unset($messages['#total']);

    foreach ($messages as $message) {
      $node->conduit_result_drupal_delta[LANGUAGE_NONE][]['value'] = $delta;
      foreach ($message as $key => $value) {
        $node->{'conduit_result_drupal_' . $key}[LANGUAGE_NONE][]['value'] = $message[$key];
      }
    }
    $delta++;
  }
}

/**
 * Implements hook_views_data_alter().
 */
function conduit_drupal_views_data_alter(&$data) {
  views_field_add_multi_join($data, 'conduit_result_drupal_type_0', 'conduit_result_drupal_item', 'field_revision');
  views_field_add_multi_join($data, 'conduit_result_drupal_type_1', 'conduit_result_drupal_item', 'field_revision');
  views_field_add_multi_join($data, 'conduit_result_drupal_type_2', 'conduit_result_drupal_item', 'field_revision');
  // @todo Retain for testing -- delete for production unless we want views on current table.
  views_field_add_multi_join($data, 'conduit_result_drupal_type_0', 'conduit_result_drupal_item');
  views_field_add_multi_join($data, 'conduit_result_drupal_type_1', 'conduit_result_drupal_item');
  views_field_add_multi_join($data, 'conduit_result_drupal_type_2', 'conduit_result_drupal_item');
}

/**
 * Implements hook_views_field_add_multi_join_alter().
 */
function conduit_drupal_views_field_add_multi_join_alter(&$join, &$context) {
  extract($context);

  // If the field is joining to summary table, then proceed.
  if ($join_field == 'conduit_result_drupal_summary') {
    // If the delta field is being joined to summary then join on the delta
    // fields value instead of it's delta column and perform a left join since
    // there will always be summaries, but not necessarily messages. If joining
    // to any other field then join to the delta field table.
    if ($base_field == 'conduit_result_drupal_delta') {
      $join['field']['delta'] = 'conduit_result_drupal_delta_value';
    }
    elseif ($base_field != 'conduit_result_drupal_item' && strpos($base_field, 'conduit_result_drupal_type_') === FALSE) {
      $join['left_table'] = $base_type . '_conduit_result_drupal_delta';
    }
  }
}

/**
 * Implements hook_block_info_alter().
 */
function conduit_drupal_block_info_alter(&$blocks, $theme, $code_blocks) {
  foreach ($blocks['views'] as &$block) {
    unset($type);
    if (strpos($block['info'], 'drupal_coder_result') !== FALSE) $type = 'conduit_job_drupal_coder';
    if (strpos($block['info'], 'drupal_plumber_result') !== FALSE) $type = 'conduit_job_drupal_plumber';
    if (isset($type)) {
      if (empty($block['status'])) {
        $block['status'] = 1;
        $block['region'] = 'sidebar_first';
        $block['weight'] = -9;
        $block['pages'] = implode("\n", array('node/add/*', 'node/*/edit', 'node/*/properties'));
      }
      else {
        // Restrict filter blocks to the content type they are related to.
        $form_state = array(
          'values' => array(
            'types' => array($type => $type),
            'op' => 'Save block',
          ),
        );
        module_load_include('admin.inc', 'block');
        drupal_form_submit('block_admin_configure', $form_state, $block['module'], $block['delta']);
        drupal_get_messages();
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter(): views_exposed_form.
 */
function conduit_drupal_form_views_exposed_form_alter(&$form, &$form_state) {
  if (isset($form['#info']['filter-conduit_result_drupal_item_value_raw'])) {
    unset($form['#action']);
  }
}
