<?php
/**
 * @file
 * Provides Drupal coder integration.
 *
 * @author Jimmy Berry ("boombatower", http://drupal.org/user/214218)
 */

/**
 * The maximum number of test cases per chunk.
 */
define('DRUPAL_PLUMBER_CHUNK', 20);

/**
 * Implements hook_node_info().
 */
function drupal_plumber_node_info() {
  return conduit_node_info_job('drupal_plumber', t('Execute test cases.'));
}

/**
 * Implements hook_conduit_validate().
 */
function drupal_plumber_conduit_validate(array $properties) {
  conduit_drupal_conduit_validate($properties);
  extract($properties);

  if (isset($scan)) {
    if (!drupal_plumber_scan_load($scan)) {
      conduit_validate_error('scan', t('must point to scan job that contains classes'));
    }
  }
  else {
    if (!is_array($classes)) {
      conduit_validate_error('classes', t('must be an array'));
    }
    elseif (!$classes) {
      conduit_validate_error('classes', t('cannot be empty'));
    }
    else {
      foreach ($classes as $index => $class) {
        if (preg_match('/\s/', $class)) {
          conduit_validate_error('classes', t('may not contain spaces'), $index);
        }
      }
    }
  }

  if (!module_exists('conduit_coverage')) {
    if (isset($coverage)) {
      conduit_validate_error('coverage', t('coverage support not enabled'));
    }
  }
  elseif (!is_bool($coverage)) {
    conduit_validate_error('coverage', t('must be a boolean'));
  }

  if (!is_array($statuses)) {
    conduit_validate_error('statuses', t('must be an array'));
  }
  else {
    foreach ($statuses as $index => $status) {
      if (!in_array($status, array('pass', 'fail', 'exception', 'debug'))) {
        conduit_validate_error('statuses', t('must be: pass, fail, exception, or debug'), $index);
      }
    }
  }
}

/**
 * Implements hook_conduit_default_properties().
 */
function drupal_plumber_conduit_default_properties() {
  $properties = conduit_drupal_conduit_default_properties() + array(
    'classes' => array(),
    'database' => 'mysql',
    'statuses' => array('fail', 'exception', 'debug'),
    'variables' => array(),
  );
  if (module_exists('conduit_coverage')) {
    $properties['coverage'] = FALSE;
  }
  return $properties;
}

/**
 * Implements hook_conduit_queue_build().
 */
function drupal_plumber_conduit_queue_build(array $properties) {
  $classes = $properties['classes'];

  // If scan property is set then attempt to load scan job and uses the classes
  // stored in the job results.
  if (isset($properties['scan'])) {
    $classes = drupal_plumber_scan_load($properties['scan']);
  }

  // Split test classes up into chunks of 20.
  $chunks = array_chunk($classes, DRUPAL_PLUMBER_CHUNK);
  $items = array();
  foreach ($chunks as $chunk) {
    $items[] = array(
      'classes' => $chunk,
    );
  }

  // Ensure that one chunk is always queued, even if no tests to run.
  if (!$items) {
    $items[] = array();
  }

  return $items;
}

/**
 * Load a scan job and extract the test class list.
 *
 * @param $scan_id
 *   Scan job ID.
 * @return
 *   List of classes or FALSE.
 */
function drupal_plumber_scan_load($scan_id) {
  if (($scan = current(field_suppress_entity_load_unsuppressed('node', array($scan_id)))) && isset($scan->conduit_result_drupal_scan_list)) {
    $list = $scan->conduit_result_drupal_scan_list;
    $list = isset($list[LANGUAGE_NONE]) ? $list[LANGUAGE_NONE] : array();
    $classes = array();
    foreach ($list as $class) {
      $classes[] = $class['value'];
    }
    return $classes;
  }
  return FALSE;
}

/**
 * Implements hook_conduit_init().
 */
function drupal_plumber_conduit_init($node, $chunk_count) {
  conduit_drupal_conduit_init($node, $chunk_count);
}

/**
 * Implements hook_conduit_result().
 */
function drupal_plumber_conduit_result($node, $delta, $result) {
  // Set #title to include test name, class, and group.
  foreach ($result['meta'] as $class => $info) {
    $result['result'][$class]['#title'] = "{$info['name']} ($class) [{$info['group']}]";
  }
  conduit_drupal_conduit_result($node, $delta, $result['result']);

  // If coverage data included in result then save the data.
  if ($result['coverage']) {
    conduit_coverage_result_save($node, $delta, $result);
  }
  return;
}

/**
 * Implements hook_conduit_drupal_result_message().
 */
function drupal_plumber_conduit_drupal_result_message($total) {
  return t('@pass pass, @fail fail, and @exception exception messages', array(
    '@pass' => $total[0],
    '@fail' => $total[1],
    '@exception' => $total[2],
  ));
}

/**
 * Implements hook_views_api().
 */
function drupal_plumber_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_views_default_views_alter().
 */
function drupal_plumber_views_default_views_alter(&$views) {
  // Restrict the coverage view to the plumber node type.
  $type = 'conduit_job_drupal_plumber';
  $views['conduit_coverage']->display['default']->display_options['arguments']['nid']['validate_options']['types'][$type] = $type;
}

/**
 * Implements hook_views_pre_render().
 */
function drupal_plumber_views_pre_render($view) {
  if (strpos($view->name, 'drupal_plumber') === 0) {
    // Add conduit_drupal css to all drupal_plumber views.
    drupal_add_css(drupal_get_path('module', 'conduit_drupal') . '/conduit_drupal.css');
  }
}
